# agents/analyzers/scoring_engine.py
"""
Sistema de Scoring Fundamentalista - Motor Principal
Sistema de pesos configuráveis, normalização de indicadores e score composto (0-100)

Atualizado: 14/07/2025
Autor: Claude Sonnet 4
Status: Implementação Completa - Fase 2 Passo 2.1

CARACTERÍSTICAS:
- Sistema de pesos configuráveis por métrica
- Normalização de indicadores (percentis)
- Comparação setorial automatizada
- Score composto ponderado (0-100)
- Integração completa com FinancialCalculator
"""
import logging
import json
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
from pathlib import Path

# Imports do projeto
try:
    from utils.financial_calculator import FinancialData, FinancialMetrics, FinancialCalculator
    CALCULATOR_AVAILABLE = True
except ImportError:
    CALCULATOR_AVAILABLE = False

# Configurações e logging
logger = logging.getLogger(__name__)


def safe_float(value, default=0.0):
    """Converte para float de forma segura"""
    if value is None:
        return default
    try:
        return float(value)
    except (TypeError, ValueError):
        return default


def normalize_score(value: float, min_val: float, max_val: float, 
                   reverse: bool = False) -> float:
    """
    Normaliza valor para escala 0-100
    
    Args:
        value: Valor a ser normalizado
        min_val: Valor mínimo da escala
        max_val: Valor máximo da escala
        reverse: Se True, valores maiores recebem scores menores
    """
    if min_val >= max_val:
        return 50.0  # Score neutro se range inválido
    
    # Limitar valor ao range
    value = max(min_val, min(max_val, value))
    
    # Normalizar para 0-1
    normalized = (value - min_val) / (max_val - min_val)
    
    # Reverter se necessário (para métricas onde menor é melhor)
    if reverse:
        normalized = 1.0 - normalized
    
    # Converter para 0-100
    return normalized * 100.0


def calculate_percentile(value: float, values_list: List[float]) -> float:
    """Calcula percentil de um valor em relação a uma lista"""
    if not values_list or value is None:
        return 50.0
    
    valid_values = [v for v in values_list if v is not None]
    if not valid_values:
        return 50.0
    
    valid_values.sort()
    count_below = sum(1 for v in valid_values if v < value)
    count_equal = sum(1 for v in valid_values if v == value)
    
    # Percentil usando método de interpolação
    percentile = (count_below + 0.5 * count_equal) / len(valid_values) * 100
    return max(0.0, min(100.0, percentile))


class QualityTier(Enum):
    """Níveis de qualidade das empresas baseados no score"""
    EXCELLENT = "excellent"      # 90-100
    GOOD = "good"               # 70-89
    AVERAGE = "average"         # 50-69
    BELOW_AVERAGE = "below_average"  # 30-49
    POOR = "poor"               # 0-29


@dataclass
class ScoringWeights:
    """Pesos configuráveis para cada categoria de métrica"""
    valuation: float = 0.25      # 25% - Métricas de valuation (P/L, P/VP, etc.)
    profitability: float = 0.30  # 30% - Métricas de rentabilidade (ROE, margens)
    growth: float = 0.20         # 20% - Métricas de crescimento
    financial_health: float = 0.15  # 15% - Métricas de saúde financeira (dívida)
    efficiency: float = 0.10     # 10% - Métricas de eficiência

    def validate(self) -> bool:
        """Valida se os pesos somam 1.0"""
        total = sum([self.valuation, self.profitability, self.growth, 
                    self.financial_health, self.efficiency])
        return abs(total - 1.0) < 0.001

    def normalize(self):
        """Normaliza os pesos para somar 1.0"""
        total = sum([self.valuation, self.profitability, self.growth, 
                    self.financial_health, self.efficiency])
        
        if total > 0:
            self.valuation /= total
            self.profitability /= total
            self.growth /= total
            self.financial_health /= total
            self.efficiency /= total

    @classmethod
    def load_from_config(cls, config_path: Optional[str] = None) -> 'ScoringWeights':
        """Carrega pesos de arquivo de configuração"""
        if config_path is None:
            config_path = Path.cwd() / 'config' / 'scoring_weights.json'
        
        try:
            if Path(config_path).exists():
                with open(config_path, 'r') as f:
                    data = json.load(f)
                return cls(**data)
        except Exception as e:
            logger.warning(f"Erro ao carregar configuração de pesos: {e}")
        
        return cls()  # Retorna pesos padrão


@dataclass
class SectorBenchmarks:
    """Benchmarks setoriais para comparação"""
    sector: str
    pe_ratio_median: float = 15.0
    pb_ratio_median: float = 2.0
    roe_median: float = 15.0
    net_margin_median: float = 10.0
    revenue_growth_median: float = 10.0
    debt_to_equity_median: float = 0.5
    sample_size: int = 0
    last_updated: Optional[datetime] = None

    @classmethod
    def get_default_benchmarks(cls) -> Dict[str, 'SectorBenchmarks']:
        """Retorna benchmarks padrão por setor"""
        return {
            'Bancos': cls(
                sector='Bancos',
                pe_ratio_median=12.0,
                pb_ratio_median=1.5,
                roe_median=18.0,
                net_margin_median=25.0,
                revenue_growth_median=8.0,
                debt_to_equity_median=5.0
            ),
            'Tecnologia': cls(
                sector='Tecnologia',
                pe_ratio_median=25.0,
                pb_ratio_median=3.0,
                roe_median=20.0,
                net_margin_median=15.0,
                revenue_growth_median=25.0,
                debt_to_equity_median=0.2
            ),
            'Petróleo e Gás': cls(
                sector='Petróleo e Gás',
                pe_ratio_median=10.0,
                pb_ratio_median=1.0,
                roe_median=12.0,
                net_margin_median=8.0,
                revenue_growth_median=5.0,
                debt_to_equity_median=0.8
            ),
            'Varejo': cls(
                sector='Varejo',
                pe_ratio_median=18.0,
                pb_ratio_median=2.5,
                roe_median=16.0,
                net_margin_median=5.0,
                revenue_growth_median=12.0,
                debt_to_equity_median=0.6
            ),
            'Utilities': cls(
                sector='Utilities',
                pe_ratio_median=14.0,
                pb_ratio_median=1.8,
                roe_median=12.0,
                net_margin_median=12.0,
                revenue_growth_median=5.0,
                debt_to_equity_median=1.2
            ),
            'Geral': cls(
                sector='Geral',
                pe_ratio_median=15.0,
                pb_ratio_median=2.0,
                roe_median=15.0,
                net_margin_median=10.0,
                revenue_growth_median=10.0,
                debt_to_equity_median=0.5
            )
        }


@dataclass
class FundamentalScore:
    """Score fundamentalista completo de uma empresa"""
    stock_code: str
    sector: str
    
    # Scores por categoria (0-100)
    valuation_score: float
    profitability_score: float
    growth_score: float
    financial_health_score: float
    efficiency_score: float
    
    # Score composto final
    composite_score: float
    
    # Rankings e percentis
    sector_rank: int = 0
    sector_percentile: float = 50.0
    overall_rank: int = 0
    overall_percentile: float = 50.0
    
    # Qualidade e metadados
    quality_tier: QualityTier = QualityTier.AVERAGE
    analysis_date: datetime = None
    data_quality: float = 100.0
    
    # Detalhes da análise
    strengths: List[str] = None
    weaknesses: List[str] = None
    recommendation: str = "NEUTRO"
    
    def __post_init__(self):
        if self.analysis_date is None:
            self.analysis_date = datetime.now()
        if self.strengths is None:
            self.strengths = []
        if self.weaknesses is None:
            self.weaknesses = []
        
        # Determinar quality tier baseado no composite score
        self.quality_tier = self._determine_quality_tier()
        
        # Determinar recomendação
        self.recommendation = self._determine_recommendation()
    
    def _determine_quality_tier(self) -> QualityTier:
        """Determina o tier de qualidade baseado no score"""
        if self.composite_score >= 90:
            return QualityTier.EXCELLENT
        elif self.composite_score >= 70:
            return QualityTier.GOOD
        elif self.composite_score >= 50:
            return QualityTier.AVERAGE
        elif self.composite_score >= 30:
            return QualityTier.BELOW_AVERAGE
        else:
            return QualityTier.POOR
    
    def _determine_recommendation(self) -> str:
        """Determina recomendação baseada no score e qualidade"""
        if self.composite_score >= 85 and self.data_quality >= 80:
            return "COMPRA FORTE"
        elif self.composite_score >= 70 and self.data_quality >= 70:
            return "COMPRA"
        elif self.composite_score >= 30:
            return "NEUTRO"
        elif self.composite_score >= 15:
            return "VENDA"
        else:
            return "VENDA FORTE"
    
    def to_dict(self) -> Dict[str, Any]:
        """Converte para dicionário"""
        result = asdict(self)
        result['quality_tier'] = self.quality_tier.value
        result['analysis_date'] = self.analysis_date.isoformat()
        return result


class ScoringEngine:
    """
    Motor principal do sistema de scoring fundamentalista
    
    Características:
    - Sistema de pesos configuráveis
    - Normalização automática baseada em percentis
    - Comparação setorial
    - Score composto ponderado (0-100)
    """
    
    def __init__(self, weights: Optional[ScoringWeights] = None,
                 sector_benchmarks: Optional[Dict[str, SectorBenchmarks]] = None):
        self.weights = weights or ScoringWeights()
        self.sector_benchmarks = sector_benchmarks or SectorBenchmarks.get_default_benchmarks()
        self.logger = logging.getLogger(__name__)
        
        # Validar e normalizar pesos
        if not self.weights.validate():
            self.logger.warning("Pesos não somam 1.0, normalizando...")
            self.weights.normalize()
        
        # Cache para percentis
        self._percentile_cache = {}
        
        self.logger.info("ScoringEngine inicializado com sucesso")
    
    def calculate_comprehensive_score(self, financial_data: FinancialData,
                                    financial_metrics: Optional[FinancialMetrics] = None) -> FundamentalScore:
        """
        Calcula score fundamentalista completo
        
        Args:
            financial_data: Dados financeiros da empresa
            financial_metrics: Métricas já calculadas (opcional)
            
        Returns:
            FundamentalScore: Score completo com todos os detalhes
        """
        # Calcular métricas se não fornecidas
        if financial_metrics is None:
            if CALCULATOR_AVAILABLE:
                calculator = FinancialCalculator()
                financial_metrics = calculator.calculate_all_metrics(financial_data)
            else:
                raise ValueError("FinancialCalculator não disponível e métricas não fornecidas")
        
        # Obter benchmark setorial
        sector = financial_data.sector or 'Geral'
        sector_benchmark = self.sector_benchmarks.get(sector, self.sector_benchmarks['Geral'])
        
        # Calcular scores por categoria
        valuation_score = self.calculate_valuation_score(financial_metrics, sector_benchmark)
        profitability_score = self.calculate_profitability_score(financial_metrics, sector_benchmark)
        growth_score = self.calculate_growth_score(financial_metrics, sector_benchmark)
        financial_health_score = self.calculate_financial_health_score(financial_metrics, sector_benchmark)
        efficiency_score = self.calculate_efficiency_score(financial_metrics, sector_benchmark)
        
        # Calcular score composto
        composite_score = self.calculate_composite_score(
            valuation_score, profitability_score, growth_score,
            financial_health_score, efficiency_score
        )
        
        # Identificar pontos fortes e fracos
        strengths, weaknesses = self._analyze_strengths_weaknesses(
            valuation_score, profitability_score, growth_score,
            financial_health_score, efficiency_score
        )
        
        # Criar FundamentalScore
        score = FundamentalScore(
            stock_code=financial_data.symbol or "N/A",
            sector=sector,
            valuation_score=valuation_score,
            profitability_score=profitability_score,
            growth_score=growth_score,
            financial_health_score=financial_health_score,
            efficiency_score=efficiency_score,
            composite_score=composite_score,
            data_quality=financial_data.data_quality_score or 100.0,
            strengths=strengths,
            weaknesses=weaknesses
        )
        
        self.logger.info(f"Score calculado para {financial_data.symbol}: {composite_score:.1f}")
        
        return score
    
    def calculate_valuation_score(self, metrics: FinancialMetrics, 
                                 benchmark: SectorBenchmarks) -> float:
        """Calcula score de valuation (0-100)"""
        scores = []
        
        # P/L Score (menor é melhor até certo ponto)
        if metrics.pe_ratio is not None and metrics.pe_ratio > 0:
            if metrics.pe_ratio <= 8:
                pe_score = 100
            elif metrics.pe_ratio <= benchmark.pe_ratio_median:
                pe_score = 100 - ((metrics.pe_ratio - 8) / (benchmark.pe_ratio_median - 8)) * 20
            elif metrics.pe_ratio <= benchmark.pe_ratio_median * 2:
                pe_score = 80 - ((metrics.pe_ratio - benchmark.pe_ratio_median) / benchmark.pe_ratio_median) * 60
            else:
                pe_score = max(0, 20 - ((metrics.pe_ratio - benchmark.pe_ratio_median * 2) / benchmark.pe_ratio_median) * 20)
            
            scores.append(pe_score * 0.4)  # 40% do peso
        
        # P/VP Score (menor é melhor)
        if metrics.pb_ratio is not None and metrics.pb_ratio > 0:
            if metrics.pb_ratio <= 0.8:
                pb_score = 100
            elif metrics.pb_ratio <= benchmark.pb_ratio_median:
                pb_score = 100 - ((metrics.pb_ratio - 0.8) / (benchmark.pb_ratio_median - 0.8)) * 25
            elif metrics.pb_ratio <= benchmark.pb_ratio_median * 2:
                pb_score = 75 - ((metrics.pb_ratio - benchmark.pb_ratio_median) / benchmark.pb_ratio_median) * 55
            else:
                pb_score = max(0, 20 - ((metrics.pb_ratio - benchmark.pb_ratio_median * 2) / benchmark.pb_ratio_median) * 20)
            
            scores.append(pb_score * 0.4)  # 40% do peso
        
        # P/S Score
        if metrics.ps_ratio is not None and metrics.ps_ratio > 0:
            # P/S ideal varia por setor, usar benchmark como referência
            ps_benchmark = benchmark.pe_ratio_median / 10  # Aproximação
            ps_score = normalize_score(metrics.ps_ratio, 0, ps_benchmark * 3, reverse=True)
            scores.append(ps_score * 0.2)  # 20% do peso
        
        return sum(scores) if scores else 50.0
    
    def calculate_profitability_score(self, metrics: FinancialMetrics,
                                    benchmark: SectorBenchmarks) -> float:
        """Calcula score de rentabilidade (0-100)"""
        scores = []
        
        # ROE Score (maior é melhor)
        if metrics.roe is not None:
            if metrics.roe >= benchmark.roe_median * 1.5:
                roe_score = 100
            elif metrics.roe >= benchmark.roe_median:
                roe_score = 80 + ((metrics.roe - benchmark.roe_median) / (benchmark.roe_median * 0.5)) * 20
            elif metrics.roe >= benchmark.roe_median * 0.5:
                roe_score = 40 + ((metrics.roe - benchmark.roe_median * 0.5) / (benchmark.roe_median * 0.5)) * 40
            elif metrics.roe >= 0:
                roe_score = (metrics.roe / (benchmark.roe_median * 0.5)) * 40
            else:
                roe_score = 0  # ROE negativo
            
            scores.append(roe_score * 0.35)  # 35% do peso
        
        # Margem Líquida Score
        if metrics.net_margin is not None:
            if metrics.net_margin >= benchmark.net_margin_median * 1.5:
                margin_score = 100
            elif metrics.net_margin >= benchmark.net_margin_median:
                margin_score = 80 + ((metrics.net_margin - benchmark.net_margin_median) / (benchmark.net_margin_median * 0.5)) * 20
            elif metrics.net_margin >= 0:
                margin_score = (metrics.net_margin / benchmark.net_margin_median) * 80
            else:
                margin_score = 0  # Margem negativa
            
            scores.append(margin_score * 0.25)  # 25% do peso
        
        # ROA Score
        if metrics.roa is not None:
            roa_benchmark = benchmark.roe_median * 0.6  # ROA tipicamente menor que ROE
            if metrics.roa >= roa_benchmark:
                roa_score = 80 + ((metrics.roa - roa_benchmark) / roa_benchmark) * 20
            elif metrics.roa >= 0:
                roa_score = (metrics.roa / roa_benchmark) * 80
            else:
                roa_score = 0
            
            scores.append(roa_score * 0.2)  # 20% do peso
        
        # Margem EBITDA Score
        if metrics.ebitda_margin is not None:
            ebitda_benchmark = benchmark.net_margin_median * 1.5  # EBITDA > margem líquida
            ebitda_score = normalize_score(metrics.ebitda_margin, 0, ebitda_benchmark * 2)
            scores.append(ebitda_score * 0.2)  # 20% do peso
        
        return sum(scores) if scores else 50.0
    
    def calculate_growth_score(self, metrics: FinancialMetrics,
                             benchmark: SectorBenchmarks) -> float:
        """Calcula score de crescimento (0-100)"""
        scores = []
        
        # Crescimento de Receita 3Y
        if metrics.revenue_growth_3y is not None:
            if metrics.revenue_growth_3y >= benchmark.revenue_growth_median * 2:
                rev_score = 100
            elif metrics.revenue_growth_3y >= benchmark.revenue_growth_median:
                rev_score = 75 + ((metrics.revenue_growth_3y - benchmark.revenue_growth_median) / benchmark.revenue_growth_median) * 25
            elif metrics.revenue_growth_3y >= 0:
                rev_score = (metrics.revenue_growth_3y / benchmark.revenue_growth_median) * 75
            else:
                rev_score = max(0, 25 + metrics.revenue_growth_3y * 2)  # Penalizar declinação
            
            scores.append(rev_score * 0.4)  # 40% do peso
        
        # Crescimento de Lucro 3Y
        if metrics.earnings_growth_3y is not None:
            if metrics.earnings_growth_3y >= benchmark.revenue_growth_median * 2:
                earn_score = 100
            elif metrics.earnings_growth_3y >= benchmark.revenue_growth_median:
                earn_score = 75 + ((metrics.earnings_growth_3y - benchmark.revenue_growth_median) / benchmark.revenue_growth_median) * 25
            elif metrics.earnings_growth_3y >= 0:
                earn_score = (metrics.earnings_growth_3y / benchmark.revenue_growth_median) * 75
            else:
                earn_score = max(0, 25 + metrics.earnings_growth_3y * 2)
            
            scores.append(earn_score * 0.4)  # 40% do peso
        
        # Crescimento de Receita 1Y (peso menor)
        if metrics.revenue_growth_1y is not None:
            rev_1y_score = normalize_score(metrics.revenue_growth_1y, -10, benchmark.revenue_growth_median * 2)
            scores.append(rev_1y_score * 0.2)  # 20% do peso
        
        return sum(scores) if scores else 50.0
    
    def calculate_financial_health_score(self, metrics: FinancialMetrics,
                                       benchmark: SectorBenchmarks) -> float:
        """Calcula score de saúde financeira (0-100)"""
        scores = []
        
        # Dívida/Patrimônio Score (menor é melhor)
        if metrics.debt_to_equity is not None:
            if metrics.debt_to_equity <= benchmark.debt_to_equity_median * 0.5:
                debt_score = 100
            elif metrics.debt_to_equity <= benchmark.debt_to_equity_median:
                debt_score = 100 - ((metrics.debt_to_equity - benchmark.debt_to_equity_median * 0.5) / (benchmark.debt_to_equity_median * 0.5)) * 25
            elif metrics.debt_to_equity <= benchmark.debt_to_equity_median * 2:
                debt_score = 75 - ((metrics.debt_to_equity - benchmark.debt_to_equity_median) / benchmark.debt_to_equity_median) * 55
            else:
                debt_score = max(0, 20 - ((metrics.debt_to_equity - benchmark.debt_to_equity_median * 2) / benchmark.debt_to_equity_median) * 20)
            
            scores.append(debt_score * 0.4)  # 40% do peso
        
        # Liquidez Corrente Score
        if metrics.current_ratio is not None:
            if metrics.current_ratio >= 2.0:
                liquidity_score = 100
            elif metrics.current_ratio >= 1.5:
                liquidity_score = 80 + ((metrics.current_ratio - 1.5) / 0.5) * 20
            elif metrics.current_ratio >= 1.0:
                liquidity_score = 40 + ((metrics.current_ratio - 1.0) / 0.5) * 40
            else:
                liquidity_score = metrics.current_ratio * 40  # Abaixo de 1.0 é problemático
            
            scores.append(liquidity_score * 0.3)  # 30% do peso
        
        # Dívida/Ativos Score
        if metrics.debt_to_assets is not None:
            debt_assets_score = normalize_score(metrics.debt_to_assets, 0, 0.6, reverse=True)
            scores.append(debt_assets_score * 0.3)  # 30% do peso
        
        return sum(scores) if scores else 50.0
    
    def calculate_efficiency_score(self, metrics: FinancialMetrics,
                                 benchmark: SectorBenchmarks) -> float:
        """Calcula score de eficiência (0-100)"""
        scores = []
        
        # Giro do Ativo Score
        if metrics.asset_turnover is not None:
            # Asset turnover ideal varia por setor
            if benchmark.sector == 'Varejo':
                ideal_turnover = 2.0
            elif benchmark.sector == 'Tecnologia':
                ideal_turnover = 1.0
            else:
                ideal_turnover = 1.2
            
            if metrics.asset_turnover >= ideal_turnover:
                turnover_score = 80 + min(20, (metrics.asset_turnover - ideal_turnover) * 20)
            else:
                turnover_score = (metrics.asset_turnover / ideal_turnover) * 80
            
            scores.append(turnover_score * 0.6)  # 60% do peso
        
        # Eficiência de Capital (ROE/ROA ratio)
        if metrics.roe is not None and metrics.roa is not None and metrics.roa > 0:
            leverage_efficiency = metrics.roe / metrics.roa
            # Leverage efficiency ideal entre 1.5-3.0
            if 1.5 <= leverage_efficiency <= 3.0:
                leverage_score = 100
            elif leverage_efficiency < 1.5:
                leverage_score = (leverage_efficiency / 1.5) * 100
            else:
                leverage_score = max(0, 100 - ((leverage_efficiency - 3.0) / 2.0) * 50)
            
            scores.append(leverage_score * 0.4)  # 40% do peso
        
        return sum(scores) if scores else 50.0
    
    def calculate_composite_score(self, valuation_score: float, profitability_score: float,
                                growth_score: float, financial_health_score: float,
                                efficiency_score: float) -> float:
        """Calcula score composto ponderado final"""
        composite = (
            valuation_score * self.weights.valuation +
            profitability_score * self.weights.profitability +
            growth_score * self.weights.growth +
            financial_health_score * self.weights.financial_health +
            efficiency_score * self.weights.efficiency
        )
        
        return max(0.0, min(100.0, composite))
    
    def _analyze_strengths_weaknesses(self, valuation_score: float, profitability_score: float,
                                    growth_score: float, financial_health_score: float,
                                    efficiency_score: float) -> Tuple[List[str], List[str]]:
        """Identifica pontos fortes e fracos baseados nos scores"""
        scores = {
            'Valuation': valuation_score,
            'Rentabilidade': profitability_score,
            'Crescimento': growth_score,
            'Saúde Financeira': financial_health_score,
            'Eficiência': efficiency_score
        }
        
        strengths = []
        weaknesses = []
        
        for category, score in scores.items():
            if score >= 80:
                strengths.append(f"{category} excelente ({score:.0f}/100)")
            elif score >= 65:
                strengths.append(f"{category} boa ({score:.0f}/100)")
            elif score <= 30:
                weaknesses.append(f"{category} fraca ({score:.0f}/100)")
            elif score <= 45:
                weaknesses.append(f"{category} abaixo da média ({score:.0f}/100)")
        
        return strengths, weaknesses
    
    def update_sector_benchmarks(self, sector: str, metrics_list: List[FinancialMetrics]):
        """Atualiza benchmarks setoriais baseado em dados reais"""
        if not metrics_list:
            return
        
        # Extrair valores válidos para cada métrica
        pe_ratios = [m.pe_ratio for m in metrics_list if m.pe_ratio and m.pe_ratio > 0]
        pb_ratios = [m.pb_ratio for m in metrics_list if m.pb_ratio and m.pb_ratio > 0]
        roes = [m.roe for m in metrics_list if m.roe and m.roe > 0]
        net_margins = [m.net_margin for m in metrics_list if m.net_margin is not None]
        revenue_growths = [m.revenue_growth_3y for m in metrics_list if m.revenue_growth_3y is not None]
        debt_ratios = [m.debt_to_equity for m in metrics_list if m.debt_to_equity is not None]
        
        # Calcular medianas
        def safe_median(values):
            if not values:
                return None
            values.sort()
            n = len(values)
            return values[n//2] if n % 2 == 1 else (values[n//2-1] + values[n//2]) / 2
        
        # Atualizar benchmark
        benchmark = SectorBenchmarks(
            sector=sector,
            pe_ratio_median=safe_median(pe_ratios) or 15.0,
            pb_ratio_median=safe_median(pb_ratios) or 2.0,
            roe_median=safe_median(roes) or 15.0,
            net_margin_median=safe_median(net_margins) or 10.0,
            revenue_growth_median=safe_median(revenue_growths) or 10.0,
            debt_to_equity_median=safe_median(debt_ratios) or 0.5,
            sample_size=len(metrics_list),
            last_updated=datetime.now()
        )
        
        self.sector_benchmarks[sector] = benchmark
        self.logger.info(f"Benchmark atualizado para setor {sector} com {len(metrics_list)} empresas")
    
    def calculate_sector_percentiles(self, scores: List[FundamentalScore]) -> List[FundamentalScore]:
        """Calcula percentis setoriais para lista de scores"""
        # Agrupar por setor
        sector_groups = {}
        for score in scores:
            if score.sector not in sector_groups:
                sector_groups[score.sector] = []
            sector_groups[score.sector].append(score)
        
        # Calcular percentis por setor
        for sector, sector_scores in sector_groups.items():
            composite_scores = [s.composite_score for s in sector_scores]
            
            for i, score in enumerate(sector_scores):
                score.sector_percentile = calculate_percentile(score.composite_score, composite_scores)
                score.sector_rank = len([s for s in composite_scores if s > score.composite_score]) + 1
        
        # Calcular percentis gerais
        all_composite_scores = [s.composite_score for s in scores]
        for i, score in enumerate(scores):
            score.overall_percentile = calculate_percentile(score.composite_score, all_composite_scores)
            score.overall_rank = len([s for s in all_composite_scores if s > score.composite_score]) + 1
        
        return scores
    
    def get_scoring_summary(self) -> Dict[str, Any]:
        """Retorna resumo da configuração do scoring"""
        return {
            'weights': asdict(self.weights),
            'sectors_configured': len(self.sector_benchmarks),
            'sectors': list(self.sector_benchmarks.keys()),
            'cache_entries': len(self._percentile_cache),
            'engine_version': '2.1.0'
        }


class ScoringBatch:
    """Processador em lote para scoring de múltiplas empresas"""
    
    def __init__(self, scoring_engine: ScoringEngine):
        self.scoring_engine = scoring_engine
        self.logger = logging.getLogger(__name__)
    
    def process_batch(self, financial_data_list: List[FinancialData]) -> List[FundamentalScore]:
        """Processa lista de empresas e retorna scores com percentis"""
        scores = []
        
        # Calcular scores individuais
        for data in financial_data_list:
            try:
                score = self.scoring_engine.calculate_comprehensive_score(data)
                scores.append(score)
            except Exception as e:
                self.logger.error(f"Erro ao processar {data.symbol}: {e}")
        
        # Calcular percentis setoriais e gerais
        if scores:
            scores = self.scoring_engine.calculate_sector_percentiles(scores)
        
        self.logger.info(f"Processamento em lote concluído: {len(scores)} empresas")
        return scores
    
    def get_top_stocks(self, scores: List[FundamentalScore], limit: int = 10,
                      min_quality: QualityTier = QualityTier.AVERAGE) -> List[FundamentalScore]:
        """Retorna top ações baseado no score"""
        # Filtrar por qualidade mínima
        quality_order = {
            QualityTier.EXCELLENT: 5,
            QualityTier.GOOD: 4,
            QualityTier.AVERAGE: 3,
            QualityTier.BELOW_AVERAGE: 2,
            QualityTier.POOR: 1
        }
        
        min_quality_value = quality_order[min_quality]
        filtered_scores = [
            s for s in scores 
            if quality_order[s.quality_tier] >= min_quality_value
        ]
        
        # Ordenar por score composto
        sorted_scores = sorted(filtered_scores, key=lambda x: x.composite_score, reverse=True)
        
        return sorted_scores[:limit]
    
    def get_sector_leaders(self, scores: List[FundamentalScore]) -> Dict[str, FundamentalScore]:
        """Retorna líder de cada setor"""
        sector_leaders = {}
        
        # Agrupar por setor e encontrar melhor de cada
        for score in scores:
            sector = score.sector
            if (sector not in sector_leaders or 
                score.composite_score > sector_leaders[sector].composite_score):
                sector_leaders[sector] = score
        
        return sector_leaders


# Funções utilitárias para facilitar o uso
def create_scoring_engine(config_path: Optional[str] = None) -> ScoringEngine:
    """Factory function para criar ScoringEngine"""
    weights = ScoringWeights.load_from_config(config_path)
    return ScoringEngine(weights)


def quick_score(financial_data: FinancialData) -> FundamentalScore:
    """Função rápida para calcular score de uma empresa"""
    engine = create_scoring_engine()
    return engine.calculate_comprehensive_score(financial_data)


def batch_score(financial_data_list: List[FinancialData]) -> List[FundamentalScore]:
    """Função rápida para calcular scores em lote"""
    engine = create_scoring_engine()
    batch_processor = ScoringBatch(engine)
    return batch_processor.process_batch(financial_data_list)


# Configuração de exemplo para salvar
EXAMPLE_SCORING_CONFIG = {
    "valuation": 0.25,
    "profitability": 0.30,
    "growth": 0.20,
    "financial_health": 0.15,
    "efficiency": 0.10
}


if __name__ == "__main__":
    # Exemplo de uso e teste
    print("🎯 Testando Scoring Engine")
    print("=" * 50)
    
    # Criar dados de teste
    if CALCULATOR_AVAILABLE:
        from utils.financial_calculator import FinancialData
        
        test_data = FinancialData(
            symbol="TEST4",
            current_price=45.50,
            market_cap=180_000_000_000,
            revenue=75_000_000_000,
            net_income=12_000_000_000,
            total_assets=150_000_000_000,
            shareholders_equity=90_000_000_000,
            total_debt=20_000_000_000,
            current_assets=40_000_000_000,
            current_liabilities=15_000_000_000,
            revenue_history=[65_000_000_000, 68_000_000_000, 72_000_000_000],
            net_income_history=[9_000_000_000, 10_500_000_000, 11_200_000_000],
            sector="Tecnologia"
        )
        
        # Testar scoring
        scoring_engine = create_scoring_engine()
        score = scoring_engine.calculate_comprehensive_score(test_data)
        
        print(f"📊 RESULTADO DO TESTE:")
        print(f"   Empresa: {score.stock_code}")
        print(f"   Setor: {score.sector}")
        print(f"   Score Composto: {score.composite_score:.1f}/100")
        print(f"   Quality Tier: {score.quality_tier.value}")
        print(f"   Recomendação: {score.recommendation}")
        
        print(f"\n📈 SCORES POR CATEGORIA:")
        print(f"   Valuation: {score.valuation_score:.1f}/100")
        print(f"   Rentabilidade: {score.profitability_score:.1f}/100")
        print(f"   Crescimento: {score.growth_score:.1f}/100")
        print(f"   Saúde Financeira: {score.financial_health_score:.1f}/100")
        print(f"   Eficiência: {score.efficiency_score:.1f}/100")
        
        if score.strengths:
            print(f"\n💪 PONTOS FORTES:")
            for strength in score.strengths:
                print(f"   • {strength}")
        
        if score.weaknesses:
            print(f"\n⚠️ PONTOS FRACOS:")
            for weakness in score.weaknesses:
                print(f"   • {weakness}")
        
        # Testar configuração
        summary = scoring_engine.get_scoring_summary()
        print(f"\n⚙️ CONFIGURAÇÃO:")
        print(f"   Pesos: Valuation {summary['weights']['valuation']:.0%}, "
              f"Rentabilidade {summary['weights']['profitability']:.0%}, "
              f"Crescimento {summary['weights']['growth']:.0%}")
        print(f"   Setores configurados: {summary['sectors_configured']}")
        print(f"   Engine version: {summary['engine_version']}")
        
        print(f"\n✅ Scoring Engine implementado e testado com sucesso!")
        print(f"📁 Arquivo: agents/analyzers/scoring_engine.py")
        print(f"🎯 Status: COMPLETO - Sistema de scoring fundamentalista operacional")
    
    else:
        print("⚠️ FinancialCalculator não disponível para teste completo")
        print("✅ Estrutura do Scoring Engine implementada")
        print("💡 Execute com utils.financial_calculator disponível para teste completo")
        