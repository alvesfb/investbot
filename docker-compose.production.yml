# docker-compose.production.yml
# Configuração de Produção - Sistema de Recomendações de Investimentos
version: '3.8'

services:
  # ==================== APLICAÇÃO PRINCIPAL ====================
  investment-system:
    image: investment-system:production
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: investment-system-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - TZ=UTC
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
    ports:
      - "8000:8000"  # Interno, Nginx fará proxy
    networks:
      - investment-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ==================== POSTGRESQL ====================
  postgres:
    image: postgres:15-alpine
    container_name: investment-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      # Dados persistentes (CRÍTICO para produção)
      - postgres_prod_data:/var/lib/postgresql/data
      # Scripts de inicialização
      - ./database/postgresql/init:/docker-entrypoint-initdb.d:ro
      # Configuração otimizada para produção
      - ./database/postgresql/postgresql.prod.conf:/etc/postgresql/postgresql.conf:ro
      # Backups
      - ./backups/postgres:/backups:rw
    # NÃO expor porta em produção (acesso via network interna)
    networks:
      - investment-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=500
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=32MB
      -c huge_pages=try
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ==================== REDIS CACHE ====================
  redis:
    image: redis:7-alpine
    container_name: investment-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
      --timeout 300
      --tcp-keepalive 300
      --maxclients 10000
    volumes:
      - redis_prod_data:/data
      - ./backups/redis:/backups:rw
    networks:
      - investment-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== NGINX REVERSE PROXY ====================
  nginx:
    image: nginx:alpine
    container_name: investment-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
      - ./static:/var/www/static:ro
    networks:
      - investment-network
    depends_on:
      - investment-system
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ==================== WORKER BACKGROUND TASKS ====================
  celery-worker:
    image: investment-system:production
    container_name: investment-celery-prod
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - TZ=UTC
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    networks:
      - investment-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery", "inspect", "ping"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ==================== CELERY BEAT SCHEDULER ====================
  celery-beat:
    image: investment-system:production
    container_name: investment-beat-prod
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - ENVIRONMENT=production
      - TZ=UTC
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    networks:
      - investment-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== MONITORING ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: investment-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - investment-network
    depends_on:
      - investment-system
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # ==================== LOG AGGREGATION ====================
  grafana:
    image: grafana/grafana:latest
    container_name: investment-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_NAME}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - investment-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # ==================== BACKUP AUTOMATION ====================
  backup:
    image: alpine:latest
    container_name: investment-backup-prod
    restart: "no"  # Executado via cron
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups:rw
      - ./scripts/backup:/scripts:ro
      - postgres_prod_data:/var/lib/postgresql/data:ro
      - redis_prod_data:/var/lib/redis/data:ro
    networks:
      - investment-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
      apk add --no-cache postgresql-client redis &&
      /scripts/backup_production.sh &&
      /scripts/cleanup_old_backups.sh
      "
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

# ==================== VOLUMES ====================
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/investment-system/postgres
  
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind  
      device: /var/lib/investment-system/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/investment-system/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/investment-system/grafana

# ==================== NETWORKS ====================
networks:
  investment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
    driver_opts:
      com.docker.network.bridge.name: investment-prod
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"

# ==================== SECRETS (Docker Swarm) ====================
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true