# analyze_required_fields.py
"""
An√°lise detalhada dos campos obrigat√≥rios e sua influ√™ncia no teste
"""
import sys
from pathlib import Path
from datetime import datetime

# Adicionar projeto ao path
project_root = Path.cwd()
sys.path.insert(0, str(project_root))

def analyze_required_fields_impact():
    """Analisa o impacto dos campos obrigat√≥rios ausentes"""
    print("üîç AN√ÅLISE DETALHADA DOS CAMPOS OBRIGAT√ìRIOS")
    print("=" * 60)
    
    try:
        from utils.financial_calculator import FinancialData
        from agents.collectors.enhanced_yfinance_client import DataValidator
        
        # Recriar exatamente os dados do teste que falha
        print("üìã DADOS DO TESTE:")
        print("-" * 30)
        
        # Dados "completos" do teste
        complete_data = FinancialData(
            current_price=25.50,
            market_cap=100000000000,
            revenue=50000000000,
            net_income=6000000000,
            total_assets=200000000000,
            shareholders_equity=80000000000,
            sector="Tecnologia",
            last_updated=datetime.now()
        )
        
        print("‚úÖ DADOS 'COMPLETOS':")
        required_fields = ['current_price', 'market_cap', 'revenue', 'net_income']
        for field in required_fields:
            value = getattr(complete_data, field)
            status = "‚úÖ" if value is not None else "‚ùå"
            print(f"   {field}: {status} {value}")
        
        # Dados incompletos
        incomplete_data = FinancialData(
            current_price=25.50,
            market_cap=None,  # AUSENTE!
            revenue=50000000000
            # net_income tamb√©m est√° ausente!
        )
        
        print(f"\n‚ùå DADOS INCOMPLETOS:")
        for field in required_fields:
            value = getattr(incomplete_data, field)
            status = "‚úÖ" if value is not None else "‚ùå"
            print(f"   {field}: {status} {value}")
        
        # Executar valida√ß√µes
        print(f"\nüß™ RESULTADOS DA VALIDA√á√ÉO:")
        print("-" * 30)
        
        validation_complete = DataValidator.validate_financial_data(complete_data)
        validation_incomplete = DataValidator.validate_financial_data(incomplete_data)
        
        print(f"DADOS COMPLETOS:")
        print(f"   V√°lido: {validation_complete['valid']}")
        print(f"   Erros: {validation_complete['errors']}")
        print(f"   Warnings: {validation_complete['warnings']}")
        print(f"   Score: {validation_complete['quality_score']}")
        
        print(f"\nDADOS INCOMPLETOS:")
        print(f"   V√°lido: {validation_incomplete['valid']}")
        print(f"   Erros: {validation_incomplete['errors']}")
        print(f"   Warnings: {validation_incomplete['warnings']}")
        print(f"   Score: {validation_incomplete['quality_score']}")
        
        # Analisar o impacto espec√≠fico
        print(f"\nüéØ AN√ÅLISE DO IMPACTO:")
        print("-" * 30)
        
        # Teste 1: Dados completos devem ser v√°lidos
        complete_should_be_valid = validation_complete['valid']
        print(f"1. Dados completos v√°lidos: {'‚úÖ' if complete_should_be_valid else '‚ùå'}")
        if not complete_should_be_valid:
            print(f"   ‚ö†Ô∏è  PROBLEMA: Dados 'completos' considerados inv√°lidos!")
            print(f"   Erros: {validation_complete['errors']}")
        
        # Teste 2: Dados incompletos devem ser inv√°lidos
        incomplete_should_be_invalid = not validation_incomplete['valid']
        print(f"2. Dados incompletos inv√°lidos: {'‚úÖ' if incomplete_should_be_invalid else '‚ùå'}")
        
        # Teste 3: Score de qualidade
        quality_complete = validation_complete['quality_score']
        quality_incomplete = validation_incomplete['quality_score']
        
        print(f"3. Score completos ({quality_complete}) > incompletos ({quality_incomplete}): {'‚úÖ' if quality_complete > quality_incomplete else '‚ùå'}")
        print(f"4. Score completos ‚â• 60: {'‚úÖ' if quality_complete >= 60 else '‚ùå'}")
        print(f"5. Score incompletos ‚â§ 30: {'‚úÖ' if quality_incomplete <= 30 else '‚ùå'}")
        
        # Identificar qual teste est√° falhando
        failing_tests = []
        if not complete_should_be_valid:
            failing_tests.append("Dados completos considerados inv√°lidos")
        if not incomplete_should_be_invalid:
            failing_tests.append("Dados incompletos considerados v√°lidos")
        if quality_complete < 60:
            failing_tests.append(f"Score completos muito baixo: {quality_complete}")
        if quality_incomplete > 30:
            failing_tests.append(f"Score incompletos muito alto: {quality_incomplete}")
        
        if failing_tests:
            print(f"\n‚ùå TESTES QUE PODEM ESTAR FALHANDO:")
            for test in failing_tests:
                print(f"   ‚Ä¢ {test}")
        else:
            print(f"\n‚úÖ TODOS OS CRIT√âRIOS ATENDIDOS!")
        
        return failing_tests
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        return []

def test_different_complete_data():
    """Testa com dados realmente completos"""
    print(f"\nüß™ TESTE COM DADOS REALMENTE COMPLETOS")
    print("=" * 50)
    
    try:
        from utils.financial_calculator import FinancialData
        from agents.collectors.enhanced_yfinance_client import DataValidator
        
        # Dados REALMENTE completos
        really_complete_data = FinancialData(
            # Dados b√°sicos obrigat√≥rios
            current_price=25.50,
            market_cap=100000000000,
            revenue=50000000000,
            net_income=6000000000,
            
            # Dados adicionais importantes
            shares_outstanding=4000000000,
            total_assets=200000000000,
            shareholders_equity=80000000000,
            total_debt=30000000000,
            current_assets=50000000000,
            current_liabilities=20000000000,
            cash_and_equivalents=10000000000,
            gross_profit=20000000000,
            operating_income=8000000000,
            ebitda=10000000000,
            
            # Dados hist√≥ricos
            revenue_history=[45000000000, 47000000000, 50000000000],
            net_income_history=[4000000000, 5000000000, 6000000000],
            
            # Metadados
            sector="Tecnologia",
            industry="Software",
            last_updated=datetime.now()
        )
        
        validation = DataValidator.validate_financial_data(really_complete_data)
        quality = DataValidator.calculate_data_quality_score(really_complete_data)
        
        print(f"üìä RESULTADOS COM DADOS REALMENTE COMPLETOS:")
        print(f"   V√°lido: {validation['valid']}")
        print(f"   Score: {quality}")
        print(f"   Completude: {validation['completeness']:.1%}")
        print(f"   Erros: {validation['errors']}")
        print(f"   Warnings: {validation['warnings']}")
        
        # Verificar se isso resolve o problema
        tests_pass = (
            validation['valid'] and 
            quality >= 60 and 
            len(validation['errors']) == 0
        )
        
        print(f"\nüéØ TESTE COM DADOS COMPLETOS: {'‚úÖ PASSA' if tests_pass else '‚ùå FALHA'}")
        
        return quality
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return 0

def recommend_solution():
    """Recomenda solu√ß√£o baseada na an√°lise"""
    print(f"\nüí° RECOMENDA√á√ïES:")
    print("=" * 30)
    
    print("1. üîß CORRE√á√ÉO IMEDIATA:")
    print("   ‚Ä¢ Usar dados realmente completos no teste")
    print("   ‚Ä¢ Ou ajustar thresholds para valores reais")
    
    print(f"\n2. üéØ DADOS COMPLETOS IDEAIS:")
    print("   ‚Ä¢ Incluir shares_outstanding")
    print("   ‚Ä¢ Incluir dados hist√≥ricos")
    print("   ‚Ä¢ Incluir mais campos do balan√ßo")
    
    print(f"\n3. üìä THRESHOLDS REALISTAS:")
    print("   ‚Ä¢ Score alto: ‚â• 60 (em vez de > 70)")
    print("   ‚Ä¢ Score baixo: ‚â§ 30 (em vez de < 50)")
    print("   ‚Ä¢ Foco na compara√ß√£o relativa")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ AN√ÅLISE DO IMPACTO DOS CAMPOS OBRIGAT√ìRIOS")
    print("=" * 60)
    
    # Analisar problema atual
    failing_tests = analyze_required_fields_impact()
    
    # Testar com dados realmente completos
    better_quality = test_different_complete_data()
    
    # Recomenda√ß√µes
    recommend_solution()
    
    print(f"\nüìã CONCLUS√ÉO:")
    if failing_tests:
        print("‚ùå O problema √â influenciado pelos campos obrigat√≥rios")
        print("üîß Solu√ß√£o: Usar dados mais completos OU ajustar thresholds")
    else:
        print("‚úÖ O problema N√ÉO √© dos campos obrigat√≥rios")
        print("üîß Solu√ß√£o: Apenas ajustar thresholds do teste")

if __name__ == "__main__":
    main()
