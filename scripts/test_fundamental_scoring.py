#!/usr/bin/env python3
# =================================================================
# TESTE DO SISTEMA DE SCORING FUNDAMENTALISTA CORRIGIDO
# =================================================================
# Script para testar a implementa√ß√£o corrigida do Passo 2
# Compatible com a arquitetura existente do projeto
# Data: 13/07/2025
# =================================================================

"""
Script de Teste - Sistema de Scoring Fundamentalista

Este script testa a implementa√ß√£o corrigida que:
1. √â compat√≠vel com StockRepository.get_stock_by_code()
2. Usa mocks quando componentes n√£o est√£o dispon√≠veis
3. Integra corretamente com a arquitetura existente
4. Fornece fallbacks robustos para desenvolvimento
"""

import sys
import os
from pathlib import Path

# Adicionar path do projeto se necess√°rio
project_root = Path(__file__).parent.parent
if str(project_root) not in sys.path:
    sys.path.append(str(project_root))

def test_imports():
    """Testa imports e disponibilidade de componentes"""
    print("üîç TESTANDO IMPORTS E COMPONENTES")
    print("=" * 50)
    
    components_status = {}
    
    # 1. Teste Financial Calculator
    try:
        from utils.financial_calculator import FinancialCalculator, FinancialMetrics, FinancialData
        components_status['FinancialCalculator'] = True
        print("‚úÖ FinancialCalculator: Dispon√≠vel")
    except ImportError as e:
        components_status['FinancialCalculator'] = False
        print(f"‚ùå FinancialCalculator: N√£o dispon√≠vel ({e})")
    
    # 2. Teste Database
    try:
        from database.models import Stock, FundamentalAnalysis
        from database.repositories import get_stock_repository, get_fundamental_repository
        components_status['Database'] = True
        print("‚úÖ Database: Dispon√≠vel")
    except ImportError as e:
        components_status['Database'] = False
        print(f"‚ùå Database: N√£o dispon√≠vel ({e})")
    
    # 3. Teste Agno
    try:
        from agno.agent import Agent
        components_status['Agno'] = True
        print("‚úÖ Agno Framework: Dispon√≠vel")
    except ImportError as e:
        components_status['Agno'] = False
        print(f"‚ùå Agno Framework: N√£o dispon√≠vel ({e})")
    
    # 4. Teste NumPy
    try:
        import numpy as np
        components_status['NumPy'] = True
        print("‚úÖ NumPy: Dispon√≠vel")
    except ImportError as e:
        components_status['NumPy'] = False
        print(f"‚ùå NumPy: N√£o dispon√≠vel ({e})")
    
    return components_status

def test_fundamental_analyzer_import():
    """Testa import do sistema de scoring"""
    print("\nüìä TESTANDO IMPORT DO SISTEMA DE SCORING")
    print("=" * 50)
    
    try:
        # Assumindo que o arquivo foi salvo como fundamental_scoring_system.py
        # Ajustar nome conforme necess√°rio
        sys.path.append('agents/analyzers')
        
        from agents.analyzers.fundamental_scoring_system import (
            FundamentalAnalyzerAgent, 
            ScoringEngine, 
            QualityTier,
            FundamentalScore
        )
        
        print("‚úÖ Imports do sistema de scoring: Sucesso")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro no import: {e}")
        print("üí° Dica: Salve o c√≥digo como 'agents/analyzers/fundamental_scoring_system.py'")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_agent_creation():
    """Testa cria√ß√£o do agente"""
    print("\nü§ñ TESTANDO CRIA√á√ÉO DO AGENTE")
    print("=" * 50)
    
    try:
        sys.path.append('agents/analyzers')
        from agents.analyzers.fundamental_scoring_system import FundamentalAnalyzerAgent
        
        # Criar agente
        agent = FundamentalAnalyzerAgent()
        print("‚úÖ Agente criado com sucesso")
        
        # Verificar atributos essenciais
        if hasattr(agent, 'scoring_engine'):
            print("‚úÖ ScoringEngine inicializado")
        else:
            print("‚ùå ScoringEngine n√£o encontrado")
        
        if hasattr(agent, 'calculator'):
            print("‚úÖ Calculator inicializado")
        else:
            print("‚ùå Calculator n√£o encontrado")
        
        return agent
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o do agente: {e}")
        return None

def test_single_stock_analysis(agent):
    """Testa an√°lise de a√ß√£o individual"""
    print("\nüìà TESTANDO AN√ÅLISE DE A√á√ÉO INDIVIDUAL")
    print("=" * 50)
    
    if not agent:
        print("‚ùå Agente n√£o dispon√≠vel")
        return False
    
    try:
        # Testar com PETR4
        print("Analisando PETR4...")
        result = agent.analyze_single_stock("PETR4")
        
        if "error" in result:
            print(f"‚ùå Erro na an√°lise: {result['error']}")
            return False
        
        # Verificar estrutura do resultado
        required_keys = [
            "stock_code", 
            "analysis_date", 
            "fundamental_score", 
            "recommendation"
        ]
        
        missing_keys = [key for key in required_keys if key not in result]
        if missing_keys:
            print(f"‚ùå Chaves faltando no resultado: {missing_keys}")
            return False
        
        # Exibir resultado
        fs = result["fundamental_score"]
        print(f"‚úÖ An√°lise PETR4 conclu√≠da:")
        print(f"   ‚Ä¢ Score: {fs['composite_score']:.1f}/100")
        print(f"   ‚Ä¢ Qualidade: {fs['quality_tier']}")
        print(f"   ‚Ä¢ Recomenda√ß√£o: {result['recommendation']}")
        print(f"   ‚Ä¢ Setor: {result.get('stock_info', {}).get('setor', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise individual: {e}")
        return False

def test_top_stocks_analysis(agent):
    """Testa an√°lise de top a√ß√µes"""
    print("\nüèÜ TESTANDO AN√ÅLISE DE TOP A√á√ïES")
    print("=" * 50)
    
    if not agent:
        print("‚ùå Agente n√£o dispon√≠vel")
        return False
    
    try:
        print("Buscando top 3 a√ß√µes...")
        result = agent.get_top_stocks(3)
        
        if "error" in result:
            print(f"‚ùå Erro na an√°lise: {result['error']}")
            return False
        
        # Verificar resultado
        if "top_stocks" not in result:
            print("‚ùå 'top_stocks' n√£o encontrado no resultado")
            return False
        
        top_stocks = result["top_stocks"]
        print(f"‚úÖ Top a√ß√µes encontradas: {len(top_stocks)}")
        
        for i, stock in enumerate(top_stocks, 1):
            fs = stock["fundamental_score"]
            print(f"   {i}. {stock['stock_code']} - Score: {fs['composite_score']:.1f} - {stock['recommendation']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de top a√ß√µes: {e}")
        return False

def test_sector_analysis(agent):
    """Testa an√°lise setorial"""
    print("\nüè≠ TESTANDO AN√ÅLISE SETORIAL")
    print("=" * 50)
    
    if not agent:
        print("‚ùå Agente n√£o dispon√≠vel")
        return False
    
    try:
        print("Analisando setor 'Mock'...")
        result = agent.analyze_sector("Mock")
        
        if "error" in result:
            print(f"‚ùå Erro na an√°lise: {result['error']}")
            return False
        
        # Verificar resultado
        if "companies_analyzed" not in result:
            print("‚ùå 'companies_analyzed' n√£o encontrado")
            return False
        
        companies_count = result["companies_analyzed"]
        print(f"‚úÖ An√°lise setorial conclu√≠da:")
        print(f"   ‚Ä¢ Empresas analisadas: {companies_count}")
        
        if "sector_stats" in result:
            stats = result["sector_stats"]
            if "average_score" in stats:
                print(f"   ‚Ä¢ Score m√©dio: {stats['average_score']:.1f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise setorial: {e}")
        return False

def test_repository_integration():
    """Testa integra√ß√£o com reposit√≥rios"""
    print("\nüóÑÔ∏è  TESTANDO INTEGRA√á√ÉO COM REPOSIT√ìRIOS")
    print("=" * 50)
    
    try:
        from database.repositories import get_stock_repository
        
        stock_repo = get_stock_repository()
        print("‚úÖ StockRepository criado")
        
        # Testar m√©todo get_stock_by_code
        if hasattr(stock_repo, 'get_stock_by_code'):
            print("‚úÖ M√©todo get_stock_by_code dispon√≠vel")
            
            # Tentar buscar uma a√ß√£o
            try:
                stock = stock_repo.get_stock_by_code("PETR4")
                if stock:
                    print(f"‚úÖ A√ß√£o encontrada: {stock.codigo}")
                else:
                    print("‚ö†Ô∏è  A√ß√£o PETR4 n√£o encontrada (banco vazio?)")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao buscar a√ß√£o: {e}")
        else:
            print("‚ùå M√©todo get_stock_by_code N√ÉO dispon√≠vel")
        
        # Testar outros m√©todos
        methods_to_check = [
            'get_all_stocks',
            'get_stocks_by_sector',
            'create_stock'
        ]
        
        for method in methods_to_check:
            if hasattr(stock_repo, method):
                print(f"‚úÖ M√©todo {method}: Dispon√≠vel")
            else:
                print(f"‚ùå M√©todo {method}: N√£o dispon√≠vel")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Reposit√≥rios n√£o dispon√≠veis: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o: {e}")
        return False

def run_comprehensive_test():
    """Executa teste abrangente"""
    print("üöÄ TESTE ABRANGENTE DO SISTEMA DE SCORING FUNDAMENTALISTA")
    print("=" * 80)
    print("Este teste verifica a compatibilidade com a arquitetura existente")
    print("=" * 80)
    
    test_results = {}
    
    # 1. Teste de imports
    test_results['imports'] = test_imports()
    
    # 2. Teste de import do sistema
    test_results['system_import'] = test_fundamental_analyzer_import()
    
    if not test_results['system_import']:
        print("\n‚ùå TESTE INTERROMPIDO: N√£o foi poss√≠vel importar o sistema")
        return False
    
    # 3. Teste de cria√ß√£o do agente
    agent = test_agent_creation()
    test_results['agent_creation'] = agent is not None
    
    if not agent:
        print("\n‚ùå TESTE INTERROMPIDO: N√£o foi poss√≠vel criar o agente")
        return False
    
    # 4. Testes funcionais
    test_results['single_analysis'] = test_single_stock_analysis(agent)
    test_results['top_stocks'] = test_top_stocks_analysis(agent)
    test_results['sector_analysis'] = test_sector_analysis(agent)
    
    # 5. Teste de integra√ß√£o
    test_results['repository_integration'] = test_repository_integration()
    
    # Resumo dos resultados
    print("\nüìã RESUMO DOS TESTES")
    print("=" * 50)
    
    for test_name, result in test_results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    # Resultado final
    all_passed = all(test_results.values())
    
    if all_passed:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("\n‚úÖ O sistema de scoring est√° funcionando corretamente")
        print("‚úÖ Compat√≠vel com a arquitetura existente")
        print("‚úÖ Mocks funcionando para desenvolvimento")
        
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Salvar o c√≥digo como 'agents/analyzers/fundamental_scoring_system.py'")
        print("2. Integrar com dados reais do YFinance")
        print("3. Implementar Passo 3: Benchmarking Setorial Avan√ßado")
        
    else:
        failed_tests = [name for name, result in test_results.items() if not result]
        print(f"\n‚ùå ALGUNS TESTES FALHARAM: {', '.join(failed_tests)}")
        print("\nüîß A√á√ïES CORRETIVAS:")
        
        if not test_results['system_import']:
            print("‚Ä¢ Salvar o c√≥digo do sistema de scoring no local correto")
        if not test_results['repository_integration']:
            print("‚Ä¢ Verificar implementa√ß√£o dos reposit√≥rios")
        if not test_results['agent_creation']:
            print("‚Ä¢ Verificar depend√™ncias do agente")
    
    return all_passed

def simple_usage_example():
    """Exemplo simples de uso"""
    print("\nüí° EXEMPLO DE USO SIMPLES")
    print("=" * 50)
    
    try:
        sys.path.append('agents/analyzers')
        from agents.analyzers.fundamental_scoring_system import FundamentalAnalyzerAgent
        
        # Criar e usar agente
        agent = FundamentalAnalyzerAgent()
        
        print("C√≥digo de exemplo:")
        print("""
# Importar o agente
from agents.analyzers.fundamental_scoring_system import FundamentalAnalyzerAgent

# Criar agente
agent = FundamentalAnalyzerAgent()

# Analisar uma a√ß√£o
result = agent.analyze_single_stock('PETR4')
score = result['fundamental_score']['composite_score']
recommendation = result['recommendation']

print(f'PETR4: Score {score:.1f} - {recommendation}')

# Buscar top a√ß√µes
top_result = agent.get_top_stocks(5)
for stock in top_result['top_stocks']:
    code = stock['stock_code']
    score = stock['fundamental_score']['composite_score']
    rec = stock['recommendation']
    print(f'{code}: {score:.1f} - {rec}')
        """)
        
        # Executar exemplo
        result = agent.analyze_single_stock('PETR4')
        if 'error' not in result:
            fs = result['fundamental_score']
            print(f"\nResultado do exemplo:")
            print(f"PETR4: Score {fs['composite_score']:.1f} - {result['recommendation']}")
        
    except Exception as e:
        print(f"‚ùå Erro no exemplo: {e}")

if __name__ == "__main__":
    # Executar teste abrangente
    success = run_comprehensive_test()
    
    if success:
        # Mostrar exemplo de uso
        simple_usage_example()
    
    print(f"\n{'='*80}")
    print(f"TESTE CONCLU√çDO: {'‚úÖ SUCESSO' if success else '‚ùå FALHAS DETECTADAS'}")
    print(f"{'='*80}")
