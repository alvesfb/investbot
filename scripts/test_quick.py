#!/usr/bin/env python3
# =================================================================
# TESTE SIMPLES - VALIDA√á√ÉO R√ÅPIDA
# =================================================================
# Teste r√°pido para validar se a corre√ß√£o funcionou
# Execute: python test_quick.py
# =================================================================

import sys
from pathlib import Path

def setup_path():
    """Configurar path do projeto"""
    current_dir = Path.cwd()
    if str(current_dir) not in sys.path:
        sys.path.insert(0, str(current_dir))

def test_financial_data_direct():
    """Teste direto do FinancialData SEM symbol"""
    print("üß™ TESTE DIRETO - SEM SYMBOL")
    print("=" * 40)
    
    setup_path()
    
    try:
        from utils.financial_calculator import FinancialData, FinancialCalculator
        
        # ‚úÖ CORRETO: Criar sem 'symbol'
        data = FinancialData()
        print("‚úÖ FinancialData() criado (sem symbol)")
        
        # ‚úÖ CORRETO: Definir atributos se existirem
        if hasattr(data, 'market_cap'):
            data.market_cap = 100000000000
            print("‚úÖ market_cap definido")
        
        if hasattr(data, 'revenue'):
            data.revenue = 50000000000
            print("‚úÖ revenue definido")
        
        if hasattr(data, 'net_income'):
            data.net_income = 6000000000
            print("‚úÖ net_income definido")
        
        # ‚úÖ CORRETO: Usar calculator
        calc = FinancialCalculator()
        metrics = calc.calculate_all_metrics(data)
        print("‚úÖ M√©tricas calculadas SEM symbol!")
        
        # Verificar m√©tricas
        if hasattr(metrics, 'roe'):
            print(f"   ROE: {getattr(metrics, 'roe', 'N/A')}")
        if hasattr(metrics, 'profit_margin'):
            print(f"   Margem: {getattr(metrics, 'profit_margin', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_helper_if_exists():
    """Testa helper se foi criado"""
    print("\nüõ†Ô∏è  TESTE DO HELPER")
    print("=" * 30)
    
    setup_path()
    
    try:
        from agents.analyzers.financial_helper import create_financial_data, safe_calculate_metrics
        
        # Teste criar dados
        data = create_financial_data(
            stock_code="PETR4",
            market_cap=100000000000,
            revenue=50000000000,
            net_income=6000000000
        )
        print("‚úÖ Helper create_financial_data: OK")
        
        # Teste calcular m√©tricas
        metrics = safe_calculate_metrics(
            stock_code="PETR4",
            market_cap=100000000000,
            revenue=50000000000,
            net_income=6000000000
        )
        print("‚úÖ Helper safe_calculate_metrics: OK")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  Helper n√£o encontrado (execute fix primeiro)")
        return False
    except Exception as e:
        print(f"‚ùå Erro no helper: {e}")
        return False

def test_scoring_system_if_exists():
    """Testa sistema de scoring se foi criado"""
    print("\nüéØ TESTE DO SISTEMA DE SCORING")
    print("=" * 40)
    
    setup_path()
    
    try:
        from agents.analyzers.fundamental_scoring_corrected import quick_analysis
        
        result = quick_analysis("PETR4")
        
        if "error" in result:
            print(f"‚ùå Erro no sistema: {result['error']}")
            return False
        
        score = result["fundamental_score"]["composite_score"]
        recommendation = result["recommendation"]
        method = result["system_status"]["calculation_method"]
        
        print(f"‚úÖ PETR4: Score {score:.1f} - {recommendation}")
        print(f"‚úÖ M√©todo: {method}")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  Sistema de scoring n√£o encontrado (execute fix primeiro)")
        return False
    except Exception as e:
        print(f"‚ùå Erro no sistema: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ TESTE R√ÅPIDO - VALIDA√á√ÉO DA CORRE√á√ÉO")
    print("=" * 50)
    
    # Teste 1: FinancialData direto
    direct_ok = test_financial_data_direct()
    
    # Teste 2: Helper (se existir)
    helper_ok = test_helper_if_exists()
    
    # Teste 3: Sistema completo (se existir)
    system_ok = test_scoring_system_if_exists()
    
    # Resultado
    print("\nüìä RESULTADO DOS TESTES")
    print("=" * 30)
    print(f"FinancialData direto: {'‚úÖ' if direct_ok else '‚ùå'}")
    print(f"Helper: {'‚úÖ' if helper_ok else '‚ö†Ô∏è '}")
    print(f"Sistema completo: {'‚úÖ' if system_ok else '‚ö†Ô∏è '}")
    
    if direct_ok:
        print("\nüéâ PROBLEMA DO 'SYMBOL' RESOLVIDO!")
        print("‚úÖ FinancialData funciona sem o par√¢metro 'symbol'")
        
        if not helper_ok or not system_ok:
            print("\nüí° PR√ìXIMO PASSO:")
            print("Execute o script de corre√ß√£o para criar os componentes:")
            print("python fix_financial_data.py")
    else:
        print("\n‚ùå PROBLEMA AINDA EXISTE")
        print("FinancialData ainda tem problemas")
    
    print(f"\n{'='*50}")
    print(f"TESTE CONCLU√çDO: {'‚úÖ SUCESSO' if direct_ok else '‚ùå FALHA'}")
    print(f"{'='*50}")

if __name__ == "__main__":
    main()
